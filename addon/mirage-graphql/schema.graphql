# source: http://localhost:8000/graphql
# timestamp: Tue Oct 16 2018 16:52:52 GMT+0200 (CEST)

input AddFormQuestionInput {
  form: ID!
  question: ID!
  clientMutationId: String
}

"""
Add question at the end of form.
"""
type AddFormQuestionPayload {
  form: Form
  clientMutationId: String
}

input AddWorkflowFlowInput {
  workflow: ID!
  task: ID!
  next: FlowJexl!
  clientMutationId: String
}

type AddWorkflowFlowPayload {
  workflow: Workflow
  clientMutationId: String
}

interface Answer {
  id: ID
  created: DateTime!
  modified: DateTime!
  question: Question!
  meta: JSONString!
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]!
}

type AnswerEdge {
  """
  The item at the end of the edge
  """
  node: Answer

  """
  A cursor for use in pagination
  """
  cursor: String!
}

input ArchiveFormInput {
  id: ID!
  clientMutationId: String
}

type ArchiveFormPayload {
  form: Form
  clientMutationId: String
}

input ArchiveQuestionInput {
  id: ID!
  clientMutationId: String
}

type ArchiveQuestionPayload {
  question: Question
  clientMutationId: String
}

input ArchiveTaskInput {
  id: ID!
  clientMutationId: String
}

type ArchiveTaskPayload {
  task: Task
  clientMutationId: String
}

input ArchiveWorkflowInput {
  id: ID!
  clientMutationId: String
}

type ArchiveWorkflowPayload {
  workflow: Workflow
  clientMutationId: String
}

type Case implements Node {
  created: DateTime!
  modified: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  workflow: Workflow!
  status: CaseStatus!
  meta: JSONString!
  document: Document
  workItems(
    before: String
    after: String
    first: Int
    last: Int
  ): WorkItemConnection
}

type CaseConnection {
  pageInfo: PageInfo!
  edges: [CaseEdge]!
}

type CaseEdge {
  """
  The item at the end of the edge
  """
  node: Case

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum CaseStatus {
  """
  Case is running and work items need to be completed.
  """
  RUNNING

  """
  Case is done.
  """
  COMPLETE
}

type CheckboxQuestion implements Question & Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    search: String
  ): OptionConnection

  """
  The ID of the object.
  """
  id: ID!
}

input CompleteWorkItemInput {
  id: ID!
  clientMutationId: String
}

type CompleteWorkItemPayload {
  workItem: WorkItem
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type Document implements Node {
  created: DateTime!
  modified: DateTime!
  form: Form!
  meta: JSONString!
  answers(
    before: String
    after: String
    first: Int
    last: Int
    question: ID
    search: String
  ): AnswerConnection

  """
  The ID of the object.
  """
  id: ID!
}

type DocumentConnection {
  pageInfo: PageInfo!
  edges: [DocumentEdge]!
}

type DocumentEdge {
  """
  The item at the end of the edge
  """
  node: Document

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type FloatAnswer implements Answer & Node {
  created: DateTime!
  modified: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: Float!
  meta: JSONString!
}

type FloatQuestion implements Question & Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  minValue: Float
  maxValue: Float
}

type Flow implements Node {
  task: Task!
  next: FlowJexl!

  """
  The ID of the object.
  """
  id: ID!
}

type FlowConnection {
  pageInfo: PageInfo!
  edges: [FlowEdge]!
}

type FlowEdge {
  """
  The item at the end of the edge
  """
  node: Flow

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Flow jexl represents a jexl expression returning a task slug.
"""
scalar FlowJexl

type Form implements Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  name: String!
  description: String
  meta: JSONString!
  isPublished: Boolean!
  isArchived: Boolean!
  questions(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
    excludeForms: [ID]
    search: String
  ): QuestionConnection

  """
  The ID of the object.
  """
  id: ID!
}

type FormConnection {
  pageInfo: PageInfo!
  edges: [FormEdge]!
}

type FormEdge {
  """
  The item at the end of the edge
  """
  node: Form

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type IntegerAnswer implements Answer & Node {
  created: DateTime!
  modified: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: Int!
  meta: JSONString!
}

type IntegerQuestion implements Question & Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxValue: Int
  minValue: Int
}

"""
JSON String
"""
scalar JSONString

type ListAnswer implements Answer & Node {
  created: DateTime!
  modified: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: [String]!
  meta: JSONString!
}

type Mutation {
  saveWorkflow(input: SaveWorkflowInput!): SaveWorkflowPayload
  publishWorkflow(input: PublishWorkflowInput!): PublishWorkflowPayload
  archiveWorkflow(input: ArchiveWorkflowInput!): ArchiveWorkflowPayload
  addWorkflowFlow(input: AddWorkflowFlowInput!): AddWorkflowFlowPayload
  removeWorkflowFlow(input: RemoveWorkflowFlowInput!): RemoveWorkflowFlowPayload
  saveTask(input: SaveTaskInput!): SaveTaskPayload
  archiveTask(input: ArchiveTaskInput!): ArchiveTaskPayload
  startCase(input: StartCaseInput!): StartCasePayload
  completeWorkItem(input: CompleteWorkItemInput!): CompleteWorkItemPayload
  saveForm(input: SaveFormInput!): SaveFormPayload
  archiveForm(input: ArchiveFormInput!): ArchiveFormPayload
  publishForm(input: PublishFormInput!): PublishFormPayload
  addFormQuestion(input: AddFormQuestionInput!): AddFormQuestionPayload
  removeFormQuestion(input: RemoveFormQuestionInput!): RemoveFormQuestionPayload
  reorderFormQuestions(
    input: ReorderFormQuestionsInput!
  ): ReorderFormQuestionsPayload
  saveOption(input: SaveOptionInput!): SaveOptionPayload
  removeOption(input: RemoveOptionInput!): RemoveOptionPayload
  saveTextQuestion(input: SaveTextQuestionInput!): SaveTextQuestionPayload
  saveTextareaQuestion(
    input: SaveTextareaQuestionInput!
  ): SaveTextareaQuestionPayload
  saveRadioQuestion(input: SaveRadioQuestionInput!): SaveRadioQuestionPayload
  saveCheckboxQuestion(
    input: SaveCheckboxQuestionInput!
  ): SaveCheckboxQuestionPayload
  saveFloatQuestion(input: SaveFloatQuestionInput!): SaveFloatQuestionPayload
  saveIntegerQuestion(
    input: SaveIntegerQuestionInput!
  ): SaveIntegerQuestionPayload
  archiveQuestion(input: ArchiveQuestionInput!): ArchiveQuestionPayload
  saveDocument(input: SaveDocumentInput!): SaveDocumentPayload
  saveDocumentStringAnswer(
    input: SaveDocumentStringAnswerInput!
  ): SaveDocumentStringAnswerPayload
  saveDocumentIntegerAnswer(
    input: SaveDocumentIntegerAnswerInput!
  ): SaveDocumentIntegerAnswerPayload
  saveDocumentFloatAnswer(
    input: SaveDocumentFloatAnswerInput!
  ): SaveDocumentFloatAnswerPayload
  saveDocumentListAnswer(
    input: SaveDocumentListAnswerInput!
  ): SaveDocumentListAnswerPayload
}

"""
An object with an ID
"""
interface Node {
  """
  The ID of the object.
  """
  id: ID!
}

type Option implements Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  meta: JSONString!

  """
  The ID of the object.
  """
  id: ID!
}

type OptionConnection {
  pageInfo: PageInfo!
  edges: [OptionEdge]!
}

type OptionEdge {
  """
  The item at the end of the edge
  """
  node: Option

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

input PublishFormInput {
  id: ID!
  clientMutationId: String
}

type PublishFormPayload {
  form: Form
  clientMutationId: String
}

input PublishWorkflowInput {
  id: ID!
  clientMutationId: String
}

type PublishWorkflowPayload {
  workflow: Workflow
  clientMutationId: String
}

type Query {
  allWorkflows(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): WorkflowConnection
  allTasks(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    type: String
    isArchived: Boolean
    search: String
  ): TaskConnection
  allCases(
    before: String
    after: String
    first: Int
    last: Int
    workflow: ID
    status: String
  ): CaseConnection
  allWorkItems(
    before: String
    after: String
    first: Int
    last: Int
    status: String
    task: ID
    case: ID
  ): WorkItemConnection
  allForms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection
  allQuestions(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
    excludeForms: [ID]
    search: String
  ): QuestionConnection
  allDocuments(
    before: String
    after: String
    first: Int
    last: Int
    form: ID
    search: String
    id: ID
  ): DocumentConnection

  """
  The ID of the object
  """
  node(id: ID!): Node
}

interface Question {
  id: ID!
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
}

type QuestionEdge {
  """
  The item at the end of the edge
  """
  node: Question

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Question jexl represents a jexl expression returning boolean.
"""
scalar QuestionJexl

type RadioQuestion implements Question & Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    search: String
  ): OptionConnection

  """
  The ID of the object.
  """
  id: ID!
}

input RemoveFormQuestionInput {
  form: ID!
  question: ID!
  clientMutationId: String
}

type RemoveFormQuestionPayload {
  form: Form
  clientMutationId: String
}

input RemoveOptionInput {
  option: ID!
  clientMutationId: String
}

type RemoveOptionPayload {
  clientMutationId: String
}

input RemoveWorkflowFlowInput {
  workflow: ID!
  task: ID!
  clientMutationId: String
}

type RemoveWorkflowFlowPayload {
  workflow: Workflow
  clientMutationId: String
}

input ReorderFormQuestionsInput {
  form: ID!
  questions: [ID]!
  clientMutationId: String
}

type ReorderFormQuestionsPayload {
  form: Form
  clientMutationId: String
}

input SaveCheckboxQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  options: [ID]!
  clientMutationId: String
}

type SaveCheckboxQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveDocumentFloatAnswerInput {
  question: ID!
  document: ID!
  value: Float!
  meta: JSONString
  clientMutationId: String
}

type SaveDocumentFloatAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentInput {
  form: ID!
  meta: JSONString
  clientMutationId: String
}

input SaveDocumentIntegerAnswerInput {
  question: ID!
  document: ID!
  value: Int!
  meta: JSONString
  clientMutationId: String
}

type SaveDocumentIntegerAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentListAnswerInput {
  question: ID!
  document: ID!
  value: [String]!
  meta: JSONString
  clientMutationId: String
}

type SaveDocumentListAnswerPayload {
  answer: Answer
  clientMutationId: String
}

type SaveDocumentPayload {
  document: Document
  clientMutationId: String
}

input SaveDocumentStringAnswerInput {
  question: ID!
  document: ID!
  value: String!
  meta: JSONString
  clientMutationId: String
}

type SaveDocumentStringAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveFloatQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  minValue: Float
  maxValue: Float
  clientMutationId: String
}

type SaveFloatQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveFormInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString
  clientMutationId: String
}

type SaveFormPayload {
  form: Form
  clientMutationId: String
}

input SaveIntegerQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  minValue: Int
  maxValue: Int
  clientMutationId: String
}

type SaveIntegerQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveOptionInput {
  slug: String!
  label: String!
  meta: JSONString
  clientMutationId: String
}

type SaveOptionPayload {
  option: Option
  clientMutationId: String
}

input SaveRadioQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  options: [ID]!
  clientMutationId: String
}

type SaveRadioQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveTaskInput {
  slug: String!
  name: String!
  description: String
  type: TaskType!
  clientMutationId: String
}

type SaveTaskPayload {
  task: Task
  clientMutationId: String
}

input SaveTextareaQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  maxLength: Int
  clientMutationId: String
}

type SaveTextareaQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveTextQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  maxLength: Int
  clientMutationId: String
}

type SaveTextQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveWorkflowInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString
  start: ID!
  form: ID
  clientMutationId: String
}

type SaveWorkflowPayload {
  workflow: Workflow
  clientMutationId: String
}

input StartCaseInput {
  workflow: ID!
  meta: JSONString
  clientMutationId: String
}

type StartCasePayload {
  case: Case
  clientMutationId: String
}

type StringAnswer implements Answer & Node {
  created: DateTime!
  modified: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: String!
  meta: JSONString!
}

type Task implements Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  name: String!
  description: String
  type: TaskType!
  meta: JSONString!
  isArchived: Boolean!

  """
  The ID of the object.
  """
  id: ID!
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
}

type TaskEdge {
  """
  The item at the end of the edge
  """
  node: Task

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum TaskType {
  """
  Task which can only be marked as completed.
  """
  SIMPLE
}

type TextareaQuestion implements Question & Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxLength: Int
}

type TextQuestion implements Question & Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxLength: Int
}

type Workflow implements Node {
  created: DateTime!
  modified: DateTime!
  slug: String!
  name: String!
  description: String
  meta: JSONString!
  isPublished: Boolean!
  isArchived: Boolean!
  start: Task!
  form: Form

  """
  The ID of the object.
  """
  id: ID!
  flows(
    before: String
    after: String
    first: Int
    last: Int
    task: ID
  ): FlowConnection
}

type WorkflowConnection {
  pageInfo: PageInfo!
  edges: [WorkflowEdge]!
}

type WorkflowEdge {
  """
  The item at the end of the edge
  """
  node: Workflow

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type WorkItem implements Node {
  created: DateTime!
  modified: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  task: Task!
  case: Case!
  status: WorkItemStatus!
  meta: JSONString!
}

type WorkItemConnection {
  pageInfo: PageInfo!
  edges: [WorkItemEdge]!
}

type WorkItemEdge {
  """
  The item at the end of the edge
  """
  node: WorkItem

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum WorkItemStatus {
  """
  Task is ready to be processed.
  """
  READY

  """
  Task is done.
  """
  COMPLETE
}
